//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CQuestion.cpp
//  @ Date : 4/3/2017
//  @ Author : 
//
//


#include "CQuestion.h"

string CQuestion::getTitle() {
	return this->title;
}

void CQuestion::setTitle(string title) {
	this->title = title;
}

string CQuestion::getDescription() {
	return this->descripton;
}

void CQuestion::setDescription(string desc) {
	this->descripton = desc;
}

int CQuestion::getNumOfOptions() {
	return this->options.size();
}

string CQuestion::getOption(int index) {
	int count = 0;
	for (list<string>::iterator it = this->options.begin();
		it != this->options.end(); it++) {
		if (count == index) return *it;
		count++;
	}
}

void CQuestion::addOption(string option) {
	this->options.push_back(option);
}

void CQuestion::setOption(int index, string option) {
	int count = 0;
	for (list<string>::iterator it = this->options.begin();
		it != this->options.end(); it++) {
		if (count == index) {
			*it = option;
			return;
		}
		count++;
	}
}

string CQuestion::getAnswer() {
	return this->answer;
}

void CQuestion::setAnswer(string answer) {
	this->answer = answer;
}

int CQuestion::getPoints() {
	return this->points;
}

void CQuestion::setPoints(int points) {
	this->points = points;
}

string CQuestion::getExplanation() {
	return this->explanation;
}

void CQuestion::setExplanation(string expl) {
	this->explanation = expl;
}

int CQuestion::getQuestionType() {
	return this->questionType;
}

void CQuestion::setQuestionType(int type) {
	this->questionType = type;
}

CQuestion::CQuestion(string title, int points) {
	this->title = title;
	this->points = points;
}

CQuestion::CQuestion() {
	this->title = "";
	this->points = 0;
	//... to initialize the remaining members
}

CQuestion::CQuestion(CQuestion * another) {
	if (another != NULL) {
		this->title = another->getTitle();
		this->descripton = another->getDescription();
		this->points = another->getPoints();
		this->answer = another->getAnswer();
		this->conceptID = another->getConceptID();
		this->ID = another->getID();

		for (list<string>::iterator it = this->options.begin();
			it != this->options.end(); it++) {
			this->addOption(*it);
		}
	}
	this->explanation = another->getExplanation();
}

void CQuestion::operator=(CQuestion * another) {
	if (another != NULL) {
		this->title = another->getTitle();
		this->descripton = another->getDescription();
		this->points = another->getPoints();
		this->answer = another->getAnswer();
		this->conceptID = another->getConceptID();
		this->ID = another->getID();

		for (list<string>::iterator it = this->options.begin();
			it != this->options.end(); it++) {
			this->addOption(*it);
		}
	}
	this->explanation = another->getExplanation();
}

string CQuestion::toString() {
	return "Question title: " + this->title;
}

bool CQuestion::isEqual(CQuestion question) {
	//if (question == NULL) return false; // if question is a pointer parameter

	if (this->title == question.getTitle())
		return true;
	else
		return false;
}

string CQuestion::getConceptID() {
	return this->conceptID;
}

void CQuestion::setConceptID(string concept) {
	this->conceptID = concept;
}

int CQuestion::getID() {
	return this->ID;
}

void CQuestion::setID(int ID) {
	this->ID = ID;
}

